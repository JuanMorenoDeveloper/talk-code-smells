:icons: font
:twitter-tag: ACCSA
:conference-tag:
:talk-tag: Code Smells
:linkattrs:
ifndef::partials[:partials: partials]

include::{partials}/footer.ad[]

== Code Smells & Refactoring

//== !
//image::pattern-design-4pwbdv1y.jpg[background, size=auto]
// Fuente: https://standaserigraf.wordpress.com/2015/09/30/pattern-design-tecnica-artistica-que-se-ocupa-de-la-creacion-de-patrones-graficos/
== Bloaters

Son todos esas clases, códigos o métodos que son tan grandes (LoC/Complejidad) que es esto todo reto trabajar cone ellos. Normalmente estas clases no son diseñadas así de manera deliberada sino que son producto de acumulación de deuda técnica a lo largo que el proyecto evoluciona.

== Tipos de Bloaters

* Long method
* Large class
* Primitive obsession
* Long parameter list
* Data clumbs

== Long method

Métodos con muchas líneas de código.

=== Razones de este problema

Normalmente este problema ocurre cuando se agregan funcionalidades a un método y no hace refactor de su estructura.

=== Tratamiento

Si es necesario agregar comentarios o se hace difícil la compresión del método una alternativa es dividirlo en métodos más pequeños. Dentro de las opciones es tienen:

=== Recetas

* Extract Method
* Replace Temp with Query
* Introduce Parameter Object
* Preserve Whole Object
* Replace Method with Method Object
* Decompose Conditional

=== Beneficios del refactoring

* El código es más fácil de mantener
* Al evitar métodos largos se evita ocultar lógica compleja

=== Consideraciones de rendimiento

Normalmente se considera que cuando se aumenta el número de métodos se pierde performance, aunque esto puede ser cierto, se debe considerar que siempre va a ser más fácil optimizar un programa bien estructurado que uno que no.
En otros casos el impacto es mínimo o el compilador optimiza las invocaciones de manera automática (por ejemplo haciendo inlining)

== Large class
== Primitive obsession
== Long parameter list
== Data clumbs

include::{partials}/self.ad[]
